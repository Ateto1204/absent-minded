# Git 分支與 Commit 流程說明

## 一、分支策略概述
- **main**：永遠保持可部署狀態，只合併已驗證的程式碼。
- **develop**：作為整合分支，所有功能分支皆從此拉出，並在此做整合測試。
- **feature/xxx**：功能開發分支，例如 `feature/spring-boot`、`feature/user-auth`。

## 二、建立與切換分支
1. 確保本地 `develop` 已同步
   ```bash
   git checkout develop
   git pull origin develop
   ```
2. 從 `develop` 建立新的功能分支
   ```bash
   git checkout -b feature/spring-boot
   ```

## 三、開發、Commit 與 Push
1. 編輯或新增後端程式碼（例如 `backend/src/main/java/com/absent_minded/backend/HelloController.java`）。
2. 新增檔案到暫存區
   ```bash
   git add .
   ```
3. 撰寫結構化的 commit message
   - 範例：`feat: scaffold spring-boot backend`
   ```bash
   git commit -m "feat: scaffold spring-boot backend"
   ```
4. 推送到遠端並設定上游分支
   ```bash
   git push -u origin feature/spring-boot
   ```

## 四、Pull Request 與 Code Review
1. 到 GitHub 建立 Pull Request，目標分支設為 `develop`。
2. 指定至少一位同學做 Code Review。
3. CI（若有設定）綠燈、Review 通過後，再合併（Merge/Squash）。
4. 合併後可在 PR 上打上對應 Tag 或 Release 訊息。

## 五、合併後後續步驟
1. 切回 `develop`，並拉最新程式
   ```bash
   git checkout develop
   git pull origin develop
   ```
2. 刪除已完成的功能分支
   ```bash
   git branch -d feature/spring-boot
   git push origin --delete feature/spring-boot
   ```

---

這樣大家就能保持主幹穩定、並且清楚每次功能開發的歷史紀錄，期待團隊一起協作愉快！